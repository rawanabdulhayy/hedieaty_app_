// Mocks generated by Mockito 5.4.4 from annotations
// in hedieaty_app_mvc/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:hedieaty_app_mvc/features/events_list/domain/entities/Event.dart'
    as _i4;
import 'package:hedieaty_app_mvc/features/events_list/domain/repositories/domain_event_repo.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DomainEventRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDomainEventRepository extends _i1.Mock
    implements _i2.DomainEventRepository {
  MockDomainEventRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> upsertEvent(_i4.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #upsertEvent,
          [event],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i4.Event?> getEventById(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #getEventById,
          [eventId],
        ),
        returnValue: _i3.Future<_i4.Event?>.value(),
      ) as _i3.Future<_i4.Event?>);

  @override
  _i3.Future<List<_i4.Event>> getEventsByUserId(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEventsByUserId,
          [userId],
        ),
        returnValue: _i3.Future<List<_i4.Event>>.value(<_i4.Event>[]),
      ) as _i3.Future<List<_i4.Event>>);

  @override
  _i3.Future<List<_i4.Event>> getAllEvents() => (super.noSuchMethod(
        Invocation.method(
          #getAllEvents,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Event>>.value(<_i4.Event>[]),
      ) as _i3.Future<List<_i4.Event>>);

  @override
  _i3.Future<void> deleteEvent(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #deleteEvent,
          [eventId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
